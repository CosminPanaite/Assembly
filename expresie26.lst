     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                  
    15                                      ;(a*a+b/c-1)/(b+c)+d;
    16                                      ; a-word; b-byte; c-word; d-doubleword;
    17 00000000 0000                        a dw 0 
    18 00000002 01                          b db 1
    19 00000003 0100                        c dw 1
    20 00000005 0A000000                    d dd 10
    21                                      aux resw 0
    22                                      bux resd 0
    23                                      
    24                                      ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28 00000000 A0[02000000]                mov al,byte[b]
    29 00000005 6698                        cbw
    30 00000007 6699                        cwd
    31 00000009 668B1D[03000000]            mov bx,word[c]
    32 00000010 66F7FB                      idiv bx
    33                                      ;ax-> cat
    34 00000013 B301                        mov bl,1
    35 00000015 B700                        mov bh,0
    36 00000017 6629D8                      sub ax,bx
    37 0000001A 66A1[00000000]              mov ax,word[a]
    38 00000020 66A3[09000000]              mov word[aux],ax
    39 00000026 66A1[00000000]              mov ax,word[a]
    40 0000002C 66F72D[00000000]            imul word[a]
    41                                      ;dx:ax a*a 
    42 00000033 66A3[09000000]              mov [bux+0],ax
    43 00000039 668915[0B000000]            mov [bux+2],dx
    44 00000040 8B0D[09000000]              mov ecx,dword[bux]
    45 00000046 66A1[09000000]              mov ax,word[aux]
    46 0000004C 98                          cwde
    47 0000004D 29C8                        sub eax,ecx
    48 0000004F A0[02000000]                mov al,byte[b]
    49 00000054 6698                        cbw
    50 00000056 662B05[02000000]            sub ax,word[b]
    51 0000005D 6689C3                      mov bx,ax
    52 00000060 A3[09000000]                mov dword[bux],eax
    53 00000065 66A1[09000000]              mov ax,word[bux+0]
    54 0000006B 668B15[0B000000]            mov dx,word[bux+2]
    55 00000072 66F7FB                      idiv bx
    56 00000075 98                          cwde 
    57 00000076 8B1D[05000000]              mov ebx , dword[d]
    58                                     ; add eax,ebx
    59                                      
    60                                          ; exit(0)
    61 0000007C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 0000007E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
